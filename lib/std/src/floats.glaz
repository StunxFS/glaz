// (C) 2021 Glaz Developers. All rights reserved. Use of this source code
// is governed by an MIT license that can be found in the LICENSE file.

impl untyped_float {
	/// Returns the IEEE 754 binary representation of `self`, with the sign bit
	/// of `self` and the result in the same bit position.
	pub fn bits(self) u64 {
		return cast(self, f64).bits();
	}

	@[inline]
	pub fn to_str(self) str {
		return cast(self, f64).to_str();
	}
}

impl f32 {
	/// Returns the floating-point number corresponding to the IEEE 754 binary
	/// representation `b`, with the sign bit of b and the result in the same
	/// bit position.
	pub fn from_bits(b: u32) f32 {
		return unsafe { cast(&b, *f32).* };
	}

	/// Returns the IEEE 754 binary representation of `self`, with the sign bit
	/// of `self` and the result in the same bit position.
	pub fn bits(self) u32 {
		return unsafe { cast(&self, *u32).* };
	}

	pub fn to_str(self) str {
		let mut cstr: charptr = null;
		if (unsafe { C::asprintf(&cstr, c"%g", self) < 0 }) {
			return ""; // fail
		}
		return str::with_len(cstr, unsafe { C::strlen(cstr) });
	}
}

impl f64 {
	/// Returns the floating-point number corresponding to the IEEE 754 binary
	/// representation `b`, with the sign bit of b and the result in the same
	/// bit position.
	pub fn from_bits(b: u64) f64 {
		return unsafe { cast(&b, *f64).* };
	}

	/// Returns the IEEE 754 binary representation of `self`, with the sign bit
	/// of `self` and the result in the same bit position.
	pub fn bits(self) u64 {
		return unsafe { cast(&self, *u64).* };
	}

	pub fn to_str(self) str {
		let mut cstr: charptr = null;
		if (unsafe { C::asprintf(&cstr, c"%g", self) < 0 }) {
			return ""; // fail
		}
		return str::with_len(cstr, unsafe { C::strlen(cstr) });
	}
}
