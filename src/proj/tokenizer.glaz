// (C) 2021 Glaz Developers. All rights reserved. Use of self source code
// is governed by an MIT license that can be found in the LICENSE file.

use std::{panic, fs, strings};
use std::console::{eprintln};

const LF: u8 = 10;
const CR: u8 = 13;
const NUM_SEP: u8 = '_';

@[inline]
pub fn read_file(path: str) str {
	return skip_bom(try fs::read_file(path) catch { panic(err.msg); });
}

pub fn skip_bom(file_content: str) str {
	let mut raw_text = file_content;
	if (raw_text.len >= 3) {
		let ctxt = raw_text.cstr;
		if (unsafe { ctxt[0] == 0xEF and ctxt[1] == 0xBB and ctxt[2] == 0xBF }) {
	        // skip BOM bytes
			raw_text = raw_text[3:];
		}
	}
	return raw_text;
}

@[inline]
pub fn max(a: i32, b: i32) i32 {
	return if (a > b) a else b;
}

@[inline]
pub fn min(a: i32, b: i32) i32 {
	return if (a < b) a else b;
}

@[inline]
fn is_name_char(ch: u8) bool {
	return ch.is_letter() or ch == '_';
}

@[inline]
fn is_nl(ch: u8) bool {
	return ch == CR or ch == LF;
}

pub struct Tokenizer {
	file: str,
	text: str,
	mut pos: i32,
	mut line: i32,
	mut last_nl_pos: i32 = -1,
	mut all_tokens: vec[Token],
	mut tidx: i32,
	mut is_started: bool,
	mut is_cr_lf: bool,
	mut eofs: i32
}

impl Tokenizer {
	pub fn new(path: str) Tokenizer {
		let mut t = Tokenizer{
			file: path,
			text: read_file(path)
		};
		t.init();
		return t;
	}

	fn init(mut &self) {
		self.all_tokens = vec[Token]::new(0, self.text.len);
		self.tokenize_remaining_text();
		self.tidx = 0;
	}

	fn tokenize_remaining_text(mut &self) {
		loop {
			let t = self.__next();
			push!(self.all_tokens, t);
			if (t.kind == .EOF) break;
		}
	}

	@[inline]
	fn new_eof_token(&self) Token {
		return Token{
			kind: .EOF,
			pos: self.get_pos()
		};
	}

	fn end_of_file(mut &self) Token {
		self.eofs++;
		if (self.eofs > 50) {
			self.line--;
			panic(fmt!("the end of file `{}` has been reached 50 times already", self.file));
		}
		if (self.pos != self.text.len and self.eofs == 1) {
			self.inc_line_number();
		}
		self.pos = self.text.len;
		return self.new_eof_token();
	}

	@[inline]
	pub fn next(mut &self) Token {
		return self.buffer_tok();
	}

	fn buffer_tok(mut &self) Token {
		loop {
			let cidx = self.tidx;
			self.tidx++;
			if (cidx >= self.all_tokens.len) {
				return self.end_of_file();
			}
			return self.all_tokens[cidx];
		}
		return self.new_eof_token();
	}

	@[inline]
	fn cur_char(&self) u8 {
		return self.text[self.pos];
	}

	@[inline]
	fn get_pos(&self) Position {
		return Position{
			file: self.file,
			line: self.line,
			col: self.current_column(),
			pos: self.pos,
			len: 1
		};
	}

	@[inline]
	fn current_column(&self) i32 {
		return self.pos - self.last_nl_pos;
	}

	fn ignore_line(mut &self) {
		self.eat_to_end_of_line();
		self.inc_line_number();
	}

	@[inline]
	fn eat_to_end_of_line(mut &self) {
		while (self.pos < self.text.len and self.cur_char() != LF) self.pos++;
	}

	fn inc_line_number(mut &self) {
		self.last_nl_pos = min(self.text.len - 1, self.pos);
		if (self.is_cr_lf) self.last_nl_pos++;
		self.line++;
	}

	fn skip_whitespace(mut &self) {
		while (self.pos < self.text.len) {
			let c = self.cur_char();
			if (c == 8) {
				self.pos++;
				continue;
			}
			if (!(c == 32 or (c > 8 and c < 14) or (c == 0x85) or (c == 0xA0))) return;
			if (self.pos + 1 < self.text.len and c == CR and self.look_ahead(1) == LF) {
				self.is_cr_lf = true;
			}
			if (is_nl(c) and !(self.pos > 0 and self.text[self.pos - 1] == CR and c == LF)) {
				self.inc_line_number();
			}
			self.pos++;
		}
	}

	@[inline]
	fn look_ahead(&self, n: i32) u8 {
		return if (self.pos + n < self.text.len) self.text[self.pos + n] else 0;
	}

	fn read_ident(mut &self) str {
		let start = self.pos;
		self.pos++;

		while (self.pos < self.text.len) {
			let c = self.cur_char();
			if (!(is_name_char(c) or c.is_digit())) break;
			self.pos++;
		}

		let lit = self.text[start:self.pos];
		self.pos--; // fix pos
		return lit;
	}

	fn read_number(mut &self) str {
		let start = self.pos;
		if (self.pos < self.text.len and self.cur_char() == NUM_SEP) {
			self.error("separator `_` is only valid between digits in a numeric literal");
		}

		while (self.pos < self.text.len) {
			let ch = self.cur_char();
			if (ch == NUM_SEP and self.text[self.pos - 1] == NUM_SEP) {
				self.error("cannot use `_` consecutively in a numeric literal");
			}
			if (!ch.is_digit() and ch != NUM_SEP) {
				if (!ch.is_letter() or ch in vec[u8]{'e', 'E'}) {
					break;
				} else {
					self.error(
						fmt!(
							"this number has unsuitable digit `{}`",
							self.cur_char().to_ascii_str()
						)
					);
				}
			}
			self.pos++;
		}

		if (self.text[self.pos - 1] == NUM_SEP) {
			self.error("cannot use `_` at the end of a numeric literal");
		}

		// fractional part
		if (self.pos < self.text.len and self.text[self.pos] == '.') {
			self.pos++;
			if (self.pos < self.text.len) {
				// 16.6, 16.6.to_str()
				if (self.text[self.pos].is_digit()) {
					while (self.pos < self.text.len) {
						let c = self.cur_char();
						if (!c.is_digit()) {
							if (!c.is_letter() or c in vec[u8]{'e', 'E'}) {
								// 16.6.to_str()
								break;
							} else {
								self.error(
									fmt!("this number has unsuitable digit `{}`",
									c.to_ascii_str())
								);
							}
						}
						self.pos++;
					}
				} elif (self.cur_char() == '.') {
					// 4.. a range
					self.pos--;
				} elif (self.cur_char() in vec[u8]{'e', 'E'}) {
					// 6.e6
				} elif (self.cur_char().is_letter()) {
					// 16.to_str()
					self.pos--;
				} else {
					// 6.
					self.pos--;
					self.error("float literals should have a digit after the decimal point");
				}
			}
		}
		// exponential part
		if (self.pos < self.text.len and self.cur_char() in vec[u8]{'e', 'E'}) {
			self.pos++;
			if (self.pos < self.text.len and self.cur_char() in vec[u8]{'-', '+'}) {
				self.pos++;
			}
			while (self.pos < self.text.len) {
				let c = self.cur_char();
				if (!c.is_digit()) {
					if (!c.is_letter()) {
						// 6e6.to_str()
						break;
					} else {
						self.error(
							fmt!("this number has unsuitable digit `{}`", c.to_ascii_str()));
					}
				}
				self.pos++;
			}
		}
		let lit = self.text[start:self.pos];
		self.pos--; // fix pos
		return lit;
	}

	fn read_string(mut &self) str {
		let start, start_char = self.pos, self.cur_char();
		let backslash = b'\\';
		let mut backslash_count = if (start_char == backslash) 1 else 0;
		let is_raw = self.pos > 0 and self.text[self.pos - 1] == 'r';
		let mut n_cr_chars = 0;

		loop {
			self.pos++;
			if (self.pos >= self.text.len) {
				self.error("unfinished string literal");
				return "";
			}
			let c = self.cur_char();
			if (c == backslash) backslash_count += 1;
			// end of string
			if (c == '"' and (is_raw or backslash_count % 2 == 0)) {
				break; // handle "\\" at the end
			}
			if (c == CR) n_cr_chars++;
			if (c == LF) self.inc_line_number();
			if (c != backslash) backslash_count = 0;
		}

		let mut lit = "";
		if (start <= self.pos) {
			lit = self.text[start + 1:self.pos];
			if (n_cr_chars > 0) {
				lit = lit.replace("\r", "");
			}
			if (lit.contains("\\\n")) {
				lit = self.trim_slash_line_break(lit);
			}
		}
		return lit;
	}

	fn trim_slash_line_break(&self, s: str) str {
		let mut start, mut ret_str = 0, s;
		loop {
			let idx = ret_str.index_after("\\\n", start);
			if (idx != -1) {
				ret_str = ret_str[:idx] + ret_str[idx + 2:].trim_left(" \n\t\v\f\r");
				start = idx;
			} else break;
		}
		return ret_str;
	}

	fn num_lit_without_sep(&self, lit: &str) str {
		if (!lit.contains("_")) {
			return lit.clone();
		}
		let mut sb = strings::Builder::new(lit.len - lit.count("_"));
		for (ch in lit.*) {
			if (ch != '_') {
				sb.write_byte(ch);
			}
		}
		return sb.to_str();
	}

	@[inline]
	fn new_token(mut &self, kind: Kind, lit: str = "", len: i32 = 1) Token {
		self.tidx++;
		return Token::new(kind, Position{
			file: self.file,
			line: self.line,
			col: max(1, self.current_column() - len + 1),
			pos: self.pos - len + 1,
			len: len
		}, lit);
	}

	fn __next(mut &self) Token {
		loop {
			if (self.is_started) {
				self.pos++;
			} else self.is_started = true;

			self.skip_whitespace();
			if (self.pos >= self.text.len) {
				return self.new_eof_token();
			}

			let ch = self.cur_char();

			if (is_name_char(ch)) {
				let lit = self.read_ident();
				return self.new_token(.Name, lit.clone(), lit.len);
			} elif (ch.is_digit()) {
				let lit = self.read_number();
				return self.new_token(.Number, self.num_lit_without_sep(&lit), lit.len);
			}

			// delimiters and operators
			switch (ch) {
				':' => return self.new_token(.Colon);
				',' => return self.new_token(.Comma);
				'[' => return self.new_token(.Lbracket);
				']' => return self.new_token(.Rbracket);
				'"' => {
					let lit = self.read_string();
					return self.new_token(.String, lit.clone(), lit.len + 2);
				}
				else => {
					self.invalid_character();
					break;
				}
			}
		}
		return self.new_eof_token();
	}

	fn invalid_character(mut &self) {
		let len = self.text[self.pos].len_utf8();
		let end = min(self.pos + len, self.text.len);
		self.error(fmt!("invalid character: `{}`", self.text[self.pos:end]));
		self.pos += len;
	}

	@[inline]
	fn error(&self, msg: str, pos: Position = self.get_pos()) {
		eprintln(fmt!("{}: error: {}", pos, msg));
	}

	@[inline]
	fn help(&self, msg: str) {
		eprintln(fmt!("    help: {}", msg));
	}
}
