// (C) 2021 Glaz Developers. All rights reserved. Use of this source code
// is governed by an MIT license that can be found in the LICENSE file.

use std::{fs, path};

@[inline]
pub fn read_file(path: str) str {
	return skip_bom(try fs::read_file(path) catch { compiler_error(err.msg); });
}

pub fn skip_bom(file_content: str) str {
	let mut raw_text = file_content;
	if (raw_text.len >= 3) {
		let ctxt = raw_text.cstr;
		if (unsafe { ctxt[0] == 0xEF and ctxt[1] == 0xBB and ctxt[2] == 0xBF }) {
	        // skip BOM bytes
			raw_text = raw_text[3:];
		}
	}
	return raw_text;
}

pub fn is_valid_glaz_file(path: str) bool {
	if (!path::exists(path)) {
		compiler_error(fmt!("`{}` doesn't exist", path));
	} elif (path::is_dir(path)) {
		compiler_error(fmt!("`{}` is a directory", path));
	}
	return path.ends_with(".glaz");
}

pub fn load_glaz_files_from(path: str) vec[str] {
	let files = try fs::Dir::walk(path) orelse vec[str]::new();
	let mut r = vec[str]::new();
	let sep = if (path.ends_with(path::PATH_SEPARATOR)) "" else path::PATH_SEPARATOR;
	for (file in files) {
		if (file.ends_with(".glaz")) {
			push!(r, path + sep + file);
		}
	}
	return r;
}
