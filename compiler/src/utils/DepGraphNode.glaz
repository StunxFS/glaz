// (C) 2021 Glaz Developers. All rights reserved. Use of this source code
// is governed by an MIT license that can be found in the LICENSE file.

struct DepGraphNode {
	pub name: str,
	pub deps: vec[str]
}

pub struct DepGraph {
	pub mut acyclic: bool,
	pub mut nodes: vec[DepGraphNode]
}

impl DepGraph {
	@[inline]
	pub fn new() Box<DepGraph> {
		return box!(DepGraph{
			acyclic: true,
			nodes: vec[DepGraphNode]::new(0, 1024)
		});
	}

	@[inline]
	pub fn add(mut &self, name: str, deps: vec[str]) {
		push!(self.nodes, DepGraphNode{
			name: name,
			deps: deps.clone()
		});
	}

	pub fn resolve(&self) Box<DepGraph> {
		let mut node_names = OrderedDepMap{};
		let mut node_deps = OrderedDepMap{};
		for (node in self.nodes) {
			node_names.add(node.name, node.deps);
			node_deps.add(node.name, node.deps);
		}

		let mut iterations = 0;
		let mut resolved = DepGraph::new();
		while (node_deps.size() != 0) {
			iterations++;
			let mut ready_set = vec[str]::new();
			for (name in node_deps.keys) {
				let deps = node_deps.get(name);
				if (deps.len == 0) {
					push!(ready_set, name);
				}
			}
			if (ready_set.len == 0) {
				let mut g = DepGraph::new();
				g.acyclic = false;
				for (name in node_deps.keys) {
					g.add(name, node_names.get(name));
				}
				return g;
			}
			for (name in ready_set) {
				try node_deps.delete(name) catch {
					compiler_error(err.msg);
				};
				let resolved_deps = node_names.get(name);
				resolved.add(name, resolved_deps);
			}
			for (name in node_deps.keys) {
				node_deps.apply_diff(name, ready_set);
			}
		}
		return resolved;
	}

	pub fn display(&self) str {
		let mut out = vec[str]::new();
		for (node in self.nodes) {
			for (dep in node.deps) {
				push!(out, fmt!(" * {} -> {}", node.name, dep));
			}
		}
		return out.join("\n");
	}
}

struct NodeNames {
	mut is_cycle: map<str, bool>,
	mut names: map<str, vec[str]>
}

impl DepGraph {
	pub fn display_cycles(&self) str {
		let mut seen = false;
		let mut out = vec[str]::new();
		let mut nn = NodeNames{};
		for (node in self.nodes) {
			nn.names[node.name] = node.deps;
		}

		for (k, _ in nn.names) {
			let mut cycle_names = vec[str]::new();
			if (k in nn.is_cycle) {
				continue;
			}

			(seen, cycle_names) = nn.is_part_of_cycle(k, cycle_names);
			if (seen) {
				push!(out, fmt!(" * {}", cycle_names.join(" -> ")));
				nn.is_cycle = map<str, bool>::new();
			}
		}
		return out.join("\n");
	}
}

impl NodeNames {
	pub fn is_part_of_cycle(mut &self, name: str, already_seen: vec[str]) (bool, vec[str]) {
		let mut seen = false;
		let mut new_already_seen = already_seen.clone();

		if (name in self.is_cycle) {
			return (self.is_cycle[name], new_already_seen);
		}

		if (name in already_seen) {
			push!(new_already_seen, name);
			self.is_cycle[name] = true;
			return (true, new_already_seen);
		}

		push!(new_already_seen, name);
		let deps = self.names[name];
		if (deps.len == 0) {
			self.is_cycle[name] = false;
			return (false, new_already_seen);
		}

		for (d in deps) {
			let mut d_already_seen = new_already_seen.clone();
			(seen, d_already_seen) = self.is_part_of_cycle(d, d_already_seen);
			if (seen) {
				new_already_seen = d_already_seen.clone();
				self.is_cycle[name] = true;
				return (true, new_already_seen);
			}
		}

		self.is_cycle[name] = false;
		return (false, new_already_seen);
	}
}
